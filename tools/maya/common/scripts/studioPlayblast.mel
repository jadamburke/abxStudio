global proc studioPlayblast (){

	updateTimeSliderMenu "MayaWindow|toolBar6|MainTimeSliderLayout|formLayout9|TimeSliderMenu";
	if (`menu -exists "TimeSliderMenu"`){
		if (`menuItem -q -exists "stAutoPlayblastMenuItem"`){
			if (`menuItem -q -exists "stAutoPlayblastMenuItem"`)
				deleteUI -menuItem "stAutoPlayblastMenuItem";
			if (`menuItem -q -exists "stAutoPlayblastMenuItem2"`)
				deleteUI -menuItem "stAutoPlayblastMenuItem2";
			if (`menuItem -q -exists "stAutoPlayblastDivItem"`)
				deleteUI -menuItem "stAutoPlayblastDivItem";
			if (`menuItem -q -exists "stAutoPlayblastDivItem2"`)
				deleteUI -menuItem "stAutoPlayblastDivItem2";
			if (`menuItem -q -exists "stAutoPlayblastMenuItem3"`)
				deleteUI -menuItem "stAutoPlayblastMenuItem3";
			if (`menuItem -q -exists "stAutoPlayblastMenuItem4"`)
				deleteUI -menuItem "stAutoPlayblastMenuItem4";
			if (`menuItem -q -exists "stAutoPlayblastDivItem3"`)
				deleteUI -menuItem "stAutoPlayblastDivItem3";
			if (`menuItem -q -exists "stAutoPlayblastMenuItem5"`)
				deleteUI -menuItem "stAutoPlayblastMenuItem5";
			if (`menuItem -q -exists "stAutoPlayblastDivItem4"`)
				deleteUI -menuItem "stAutoPlayblastDivItem4";
		}
		else{
			setParent -menu TimeSliderMenu;
			menuItem -divider true stAutoPlayblastDivItem;
			menuItem -label "Passion Playblast renderLayer" -c "stPlayblastDoCurrentScene 2 0 0 1 0" stAutoPlayblastMenuItem4;
			menuItem -divider true stAutoPlayblastDivItem2;
			menuItem -label "Passion Playblast CameraName" -c "stPlayblastDoCurrentScene 2 0 0 0 1" stAutoPlayblastMenuItem5;
			menuItem -divider true stAutoPlayblastDivItem4;
			menuItem -label "Passion Playblast GreenScreen" -c "stPlayblastDoCurrentScene 2 0 1 0 0" stAutoPlayblastMenuItem3;
			menuItem -divider true stAutoPlayblastDivItem3;
			menuItem -label "Passion Playblast As Is(Sends to Edit)" -c "stPlayblastDoCurrentScene 2 1 0 0 0" stAutoPlayblastMenuItem;
			menuItem -label "Passion Playblast Geo Only(Sends to Edit)" -c "stPlayblastDoCurrentScene 2 0 0 0 0" stAutoPlayblastMenuItem2;


		}
	}	

}

global proc stPlayblastAddCustomCamAttrs(string $dupedCam){

		if (!`attributeExists "clipStart" $dupedCam`){
			addAttr -ln "clipStart"  -at double $dupedCam;
			setAttr -e -keyable 0 ($dupedCam+".clipStart") `playbackOptions -q -min`;
		}
		if (!`attributeExists "clipEnd" $dupedCam`){
			addAttr -ln "clipEnd"  -at double  $dupedCam;
			setAttr -e -keyable 0 ($dupedCam+".clipEnd") `playbackOptions -q -max`;
		}
		if (!`attributeExists "preRoll" $dupedCam`){
			addAttr -ln "preRoll"  -at double $dupedCam;
			setAttr -e -keyable 0 ($dupedCam+".preRoll");
		}
		if (!`attributeExists "postRoll" $dupedCam`){
			addAttr -ln "postRoll"  -at double  $dupedCam;
			setAttr -e -keyable 0 ($dupedCam+".postRoll") 0;
		}

}

global proc stPlayblastDoCurrentScene(string $doCommit, int $asIs, int $greenscreen, int $useRenderLayerName, int $useCamera){

	
	// determine the shot
	string $currentScene = `file -q -sn`;
	string $currentSceneName = `basenameEx $currentScene`;

	// 0:Server 1:Job 2:ShotFolder 3:Seq 4:Shot 5:dept 6:subDept 7:take 8:version 9:ext 10:subshot
	string $shotInfo[] = abxShotsGetFromPath($currentScene);

	string $cameraName = "";
	if (`objExists "master:renderCam"`)
		$cameraName = "master:renderCam";
	else if (`objExists "anim:renderCam"`)
		$cameraName = "anim:renderCam";
	else if (`objExists "renderCam"`)
		$cameraName = "renderCam";
	else 
		$cameraName = "renderCam";


	string $activePanel = `getPanel -withFocus`; 
	if ($useCamera) $cameraName = `modelPanel -q -camera $activePanel`;
	
	//set the playblast variables
	string $renderPath = "";
	if (!`gmatch $shotInfo[0] "[A-Z]:*"`)
		$renderPath += "//";
	$renderPath += ($shotInfo[0]+"/"+$shotInfo[1]+"/"+$shotInfo[2]+"/"+$shotInfo[3]+"/"+$shotInfo[4]+"_"+$shotInfo[10]+"/"+$shotInfo[5]+"/render/");
	string $shotName = "";
	if ($greenscreen == 1) $shotName ="GS_";
	$shotName += $shotInfo[3]+"_"+$shotInfo[4];

	string $currentLayer = `editRenderLayerGlobals -q -currentRenderLayer`;

	string $pbPath  = $renderPath+$currentSceneName;
	if ($useCamera){
		string $tbuf[];
		tokenize $cameraName "|" $tbuf;
		$camNameValid = $tbuf[size($tbuf)-1];
		//$pbPath += ("/"+$camNameValid);
		$currentSceneName += ("_"+$camNameValid);		
	}
	if ($useRenderLayerName){
		$pbPath += ("/"+$currentLayer);
		$currentSceneName += ("_"+$currentLayer);
	}
	
	
	//$currentSceneName = ($shotInfo[3]+"_"+$shotInfo[4]+"_Animation_v"+$vNum);
	//string $renderPath = (`workspace -q -rd`+"../../RENDER/"+$shotFolderGuess+"/");

	int $imgWidth = 1920;
	int $imgHeight = 1080;
	float $aspect = 1;
	float $hA = 0;
	float $hV = 0;

	// check for project defaults file and get settings from there
	if (`exists abxProjectGetShotDetails`){
		string $prjDetails[] = abxProjectGetShotDetails(`workspace -q -rd`);
		if (size($prjDetails)>7){
			$lock = $prjDetails[0];
			$fps = $prjDetails[1];
			$imgWidth = $prjDetails[2];
			$imgHeight = $prjDetails[3];
			$hA = $prjDetails[5];
			$hV =  $prjDetails[6];
			$aspect = $prjDetails[4];
			$sceneScale = $prjDetails[7];
			$renderer = $prjDetails[8];
		}	
		else{
			warning("Project Defaults File Not Found. Reverting to 1920 X 1080");
		}
	}
	else {
		warning("abxProject.mel not sourced. Skipping project defaults check.");
	}


	evalEcho("setAttr defaultResolution.width "+$imgWidth);
	evalEcho("setAttr defaultResolution.height "+$imgHeight);
	evalEcho("setAttr defaultResolution.pixelAspect "+$aspect);
	evalEcho("setAttr defaultResolution.deviceAspectRatio "+(float($imgWidth)/float($imgHeight)));



	// if the viewport is the stereo panel then switch back to the normal modelPanel 
	if ($activePanel == "StereoPanel") {
		lookThroughModelPanel $cameraName StereoPanel;
		$activePanel = `getPanel -withFocus`; 

	}
	select -clear;
	if (`modelPanel -q -exists $activePanel`){

		if (!`objExists $cameraName`){
			$result = `confirmDialog -title ("No "+$cameraName+" found") -message ("There is no "+$cameraName+" found. Please rename your main camera to 'renderCam' (case-sensitive) and make sure the camera shape node is named "+$cameraName+"Shape") -button "OK" -defaultButton "OK" -cancelButton "OK" -dismissString "OK"`;
			return;
		}
			//error ($cameraName+" does not exist. Please conform your scene or make your main camera named "+$cameraName+"\n");
		
		setAttr ($cameraName+".overscan") 1;
		setAttr ($cameraName+".filmFit") 1;
		setAttr ($cameraName+".filmFit") 1;

		if ($hA > 0)
				catchQuiet(eval("setAttr "+$cameraName+".horizontalFilmAperture "+$hA));
		if ($hV > 0)	
				catchQuiet(eval("setAttr "+$cameraName+".verticalFilmAperture "+$hV));

		lookThroughModelPanel $cameraName $activePanel;
		if ($asIs == false){
			modelEditor -e -allObjects false -ignorePanZoom true $activePanel;
			modelEditor -e -hud true -grid false -cameras false -imagePlane true -strokes true -nurbsSurfaces true -polymeshes true -dynamics true -fluids true -nParticles true $activePanel;
		}
		if ($greenscreen == 1){
			displayRGBColor "background" 0 10 0;
			displayPref -displayGradient 0;
			modelEditor -e -imagePlane false $activePanel;

		}
		// print (`playblast -ae`+"\n");
	}
	else {
			error ("Please select a viewport to playblast\n");
	}

	// frame range check
	stPlayblastCheckFrameRange($pbPath);
	
	if ($shotInfo[3] == ""){
		
		print("LOOKING FOR:"+$pbPath+".mov\n");
		if (`file -q -exists ($pbPath+".mov")`){
			$result = `confirmDialog -title "stPlayblast" -message ("A Playblast for "+$currentSceneName+" Already Exists. Please increment your scene version and try again.") -button "Abort Playblast" -button "Force Overwrite" -defaultButton "Abort Playblast" -dismissString "Abort Playblast"`;
			if ($result == "Force Overwrite"){
				stPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "mov" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
				//stPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "png" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
			}
		}
		else{		
			stPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "mov" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
			//stPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "png" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
		}
	}
	else {

		//string $pbPath  = ($renderPath+$shotInfo[3]+"/"+$shotInfo[3]+"_"+$shotInfo[4]+"/playblasts/"+$currentSceneName);
		print("LOOKING FOR:"+$pbPath+".mov\n");
		if (`file -q -exists ($pbPath+".mov")`){
			$result = `confirmDialog -title "stPlayblast" -message ("A Playblast for "+$currentSceneName+" Already Exists. Please increment your scene version and try again.") -button "Abort Playblast" -button "Force Overwrite" -defaultButton "Abort Playblast" -dismissString "Abort Playblast"`;
			if ($result == "Force Overwrite"){
				stPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "mov" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
			}
		}
		else{
			stPlayblastDoBlast2 $cameraName $pbPath $currentSceneName "mov" `playbackOptions -q -min` `playbackOptions -q -max` $imgWidth $imgHeight $doCommit $shotInfo[3];
		}
	}

	modelEditor -e -ignorePanZoom false $activePanel;
}

global proc string stPlayblastGetPadded (int $inNumber){

	string $result = "";
	if ($inNumber < 10)
		$result = ("000"+$inNumber);
	else if ($inNumber < 100)
		$result = ("00"+$inNumber);
	else if ($inNumber < 1000)
		$result = ("0"+$inNumber);
	else 
		$result = ($inNumber);

	return $result;
}


global proc stPlayblastDoBlast2 (string $cameraName, string $pbPath, string $pbName, string $ext, int $startFr, int $endFr,int $imgWidth,int $imgHeight, int $doCommit, string $seqName){

	string $cmd;
	string $cmd2;
	string $cmd3;


	int $percent = 50;

	if ($imgHeight < 720 || $imgWidth < 640){
		$percent = 100;
	}
	if ($imgHeight < 250 || $imgWidth < 450){
		$imgHeight = $imgHeight * 2;
		$imgWidth = $imgWidth * 2;
	}
	if ($imgHeight > 2048 || $imgWidth > 2048){
		$percent = 25;
	}

	int $fps = 24;
	// need to get project frame rate
		// check for project defaults file and get settings from there
	if (`exists abxProjectGetShotDetails`){
		string $prjDetails[] = abxProjectGetShotDetails(`workspace -q -rd`);
		if (size($prjDetails)>7){
			$fps = $prjDetails[1];
		}	
		else{
			warning("Project Defaults File Not Found. Reverting to 1920 X 1080");
		}
	}
	else {
		warning("abxProject.mel not sourced. Skipping project defaults check.");
	}

	//$localFolder = ("C:/users/"+`getenv USER`+"/Desktop/playblasts");
	//if (!`filetest -d $localFolder`)
		//sysFile -makeDir $localFolder;

	string $pbFullPath = ($pbPath+"/"+$pbName);
	//string $pbTempFullPath = ($localFolder+"/"+$pbName);
	string $pbTempFullPath = ($pbPath+"/"+$pbName);
	string $pbTempPath = $pbPath;
	string $startFrame = `stPlayblastGetPadded $startFr`;
	string $endFrame = `stPlayblastGetPadded $endFr`;
	
	string $stResource = `getenv ST_RESOURCE`;
	string $fileViewPath = ($stResource+"/bin/win32/djv/djv-083-pre2_winxp-x86/bin/djv_view.exe");

	// DJV_convert file converter flags (does not support audio) but can do arbitrary image sequences
	string $fileConvertPath = ($stResource+"/bin/win32/djv/djv-083-pre2_winxp-x86/bin/djv_convert.exe");
	string $fileConvertFlags = "-save quicktime codec jpeg";

	// FFMPEG file Converter and flags, can convert between movie formats but is bad at image sequences
	string $fileConvertPathAlt = ($stResource+"/bin/win32/ffmpeg/ffmpeg-20120424-git-3bbf3f7-win64-static/bin/ffmpeg");
	string $fileConvertFlagsAlt = "-y -i";
	string $fileConvertFlagsAlt2 = ("-vcodec libx264 -b:v 10000k -f mov -g 1 -r "+$fps);


	string $camShapes[] = `listRelatives -s $cameraName`;
	string $cameraShape = $camShapes[0];


		string $tokenBuffer[];
		tokenize $pbPath "/" $tokenBuffer;
		string $pbNameFolder = $tokenBuffer[size($tokenBuffer)-1];
		int $subSize = size($pbPath) - (size($pbNameFolder)+1);
		string $movServerPath = `substring $pbPath 1 $subSize`;
		string $movPath = $pbTempPath;//`substring $pbTempPath 1 $subSize`;

		//string $sourcePath = ($pbTempFullPath+"."+$startFrame+"."+$ext);
		string $sourcePath = ($pbTempFullPath+".avi");
		string $convertSourcePath = ($pbTempFullPath+".avi");
		string $destMovPath = ($movPath+"/"+$pbName+".mov");

				
		string $sysCmd = ($fileViewPath+" \\\""+$sourcePath+"\\\"");
		string $sysCmdAlt = ($fileViewPath+" \\\""+$destMovPath+"\\\"");
		string $sysCmd2 = ($fileConvertPath+" "+$fileConvertFlags+" \\\""+$convertSourcePath+"\\\" \\\""+$destMovPath+"\\\"");

		string $sysCmd2Alt = ($fileConvertPathAlt+" "+$fileConvertFlagsAlt+" \\\""+$convertSourcePath+"\\\" "+$fileConvertFlagsAlt2+" \\\""+$destMovPath+"\\\"");

			global string $gPlayBackSlider;
			string $soundNode =  `timeControl -q -sound $gPlayBackSlider`;
			
			if ($imgHeight < 480 || $imgWidth < 640){
				$cmd += "print (`playblast -ae`+\"\\n\");playblastHUDResize \"small\";";
			}
			else{
				$cmd += "print (`playblast -ae`+\"\\n\");playblastHUDResize \"large\";";
				$cmd += "headsUpDisplay -e -vis 0 HUDViewAxis;";
			}

			//playblast  -format image -filename "//pp-fs-nyc/Production/0124_Pediasure/Movies/Animation_Preview/DM/04_00/DM_04_00_Block_TK01_v001" -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent 50 -compression "png" -quality 70;

			if ($soundNode != "")
				$cmd += ("playblast -st "+$startFr+" -et "+$endFr+" -format qt -sound \""+$soundNode+"\"  -filename \""+$pbTempPath+"/"+$pbName+"\" -sequenceTime 0  -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent "+$percent+" -compression \"h264\" -quality 100 -widthHeight "+$imgWidth+" "+$imgHeight+";\n");
			else
				$cmd += ("playblast -st "+$startFr+" -et "+$endFr+" -format qt -filename \""+$pbTempPath+"/"+$pbName+"\" -sequenceTime 0 -clearCache 1 -viewer 1 -showOrnaments 1 -fp 4 -percent "+$percent+" -compression \"h264\" -quality 100 -widthHeight "+$imgWidth+" "+$imgHeight+";\n");


			$cmd += ("displayRGBColor \"background\" .27 .27 .27;displayPref -displayGradient 1;");
			// get local desktop path
			//$localFolder = ("C:/users/"+`getenv USER`+"/Desktop/playblasts");
			//if (!`filetest -d $localFolder`)
			//	sysFile -makeDir $localFolder;
			//$localFile = $destMovPath;//($localFolder+"/"+`basename $destMovPath ""`);
			
			// convert the file to a quicktime h264
			//$cmd += ("system(\""+$sysCmd2Alt+"\");\n");

			// copies the new quicktime to the users desktop so it can be opened
			//$cmd += ("sysFile -cp \""+$localFile+"\" \""+$destMovPath+"\";\n");

			// copies the new quicktime to the server location $pbpath
			//$cmd += ("if (!`filetest -r \""+$movServerPath+"\"`) sysFile -makeDir \""+$movServerPath+"\";\n");
			//$cmd += ("sysFile -cp \""+$movServerPath+"/"+$pbName+".mov"+"\" \""+$localFile+"\";\n");

			// loads up the converted quicktime
			//$cmd += ("system(\"load "+$localFile+"\");\n");

			//print ("system("+$sysCmd2+"\");
			//print ("stPlayblastsCommitToEditorAlt \""+$pbPath+"\" \""+$destMovPath+"\";");
			if($doCommit != 0) {
				//$cmd += ("stPlayblastsCommitToEditorAlt \""+$pbPath+"\" \""+$convertSourcePath+"\" "+$doCommit+" \""+$seqName+"\";");
			}
            else {
            	// deletes the .avi file if since it is no longer needed. if commit did happen it would only be deleted after converting for commit to edit
				//$cmd += ("system(\"del \\\""+encodeString(toNativePath($sourcePath))+"\\\"\");\n");
            	//$cmd += ("system(\"del /Q \\\""+$pbTempFullPath+"\\\"\");\n");
	        	//$cmd += ("system(\"rmdir \\\""+$pbTempFullPath+"\\\"\");\n");
            }			

			//if ($imgHeight < 720 || $imgWidth < 640){
				$cmd += "playblastHUDResize \"small\";";
				$cmd += "headsUpDisplay -e -vis 1 HUDViewAxis;";
				$cmd += ("stPlayblastThumbnailUpdate \""+`file -q -sn`+"\""); 
			//}			

			// run the playblast command as deferred evaluation
			print ($cmd);
			eval($cmd);
}


global proc stPlayblastCheckFrameRange(string $filePath){


	float $currentS = `playbackOptions -q -min`;
	float $currentE = `playbackOptions -q -max`;	

	$result = "Set Offical Frame Range";

	//string $tokenBuffer[];
	//string $sceneName = `basenameEx $pbPath`;
	//print ("$pbPath="+$pbPath+"\n");
	//string $scenesPath = `match "/RENDER/_[a-zA-Z0-9_]+" $pbPath`;
	//print ("$scenesPath="+$scenesPath+"\n");

	// 0:Server 1:Job 2:ShotFolder 3:Seq 4:Shot 5:dept 6:subDept 7:take 8:version 9:ext
	string $shotInfo[] = abxShotsGetFromPath($filePath);
	// 0:abxShotsVersion 1:shotName 2:resolution 3:frameRate 4:startFrame 5:endFrame 6:camVersion 7:camDate 8:anmStatus 9:fxStatus 10:lgtStatus 11:cmpStatus 12:notes 13:lens 14:thumbframe 15:assets 16:flags 
    string $shotDetails[] = abxShotsGetShotDetails(($shotInfo[3]+"/"+$shotInfo[4]+"_"+$shotInfo[10]), $shotInfo[2]);

	//if (size($scenesPath)>0){

		//tokenize $scenesPath "/" $tokenBuffer;
	string $shotFolder = $shotInfo[2];
	//tokenize $sceneName "_" $tokenBuffer;
	string $shotName = ($shotInfo[3]+"/"+$shotInfo[4]+"_"+$shotInfo[10]); //($tokenBuffer[0]+"/"+$tokenBuffer[0]+"_"+$tokenBuffer[1]);

	// get the detail
	float $start;
	float $end;		
	//string $shotDetails[] = abxShotsGetShotDetails($shotName, $shotFolder);
	if (size($shotDetails)>3){
		$start = $shotDetails[2];
		$end = $shotDetails[3];
	}

	// check for initial frame range
	string $result;
	if ($start < 1 || $end < 1 || $end < $start){
		$result = `confirmDialog -title "Offical Frame Range Missing" -message ($shotName+" has no offical frame range specified. Would you like to set it to your current frame range? ("+$currentS+"-"+$currentE+")") -button "Set Offical Frame Range" -button "Skip" -defaultButton "Skip " -cancelButton "Skip" -dismissString "Skip"`;
		if ($result == "Set Offical Frame Range"){
			evalEcho("abxShotsSetFrameRange \""+$shotFolder+"\" \""+$shotName+"\" \""+$currentS+"\" \""+$currentE+"\"");
			$start = $currentS;
			$end = $currentE;
		}
	}
	if ($result != "Skip"){
		if ($currentS != $start || $currentE != $end) {
			$result = "Match Offical Frame Range";
			$result = `confirmDialog -title "Frame Range Mismatch" -message ("Your current frame range ("+$currentS+"-"+$currentE+") does not match the offical frame range ("+$start+"-"+$end+") for Shot:"+$shotName) -button "Match Offical Frame Range" -button "Abort Playblast" -defaultButton "Match Official Frame Range" -button "Do It Anyway" -cancelButton "Abort Playblast" -dismissString "Abort Playblast"`;
			if ($result == "Match Offical Frame Range"){
				playbackOptions -e -min $start;
				playbackOptions -e -max $end;	
			}
			else if ($result == "Do It Anyway"){
				$start = `playbackOptions -q -min` ;
				$end = `playbackOptions -q -max` ;	
			}
			else {
				error ("User Aborted Playblast due to frame range not matching offical frame range for the shot");
			}
		}
	}
	//}
}

global proc stPlayblastThumbnailUpdate(string $filePath){

	float $currentS = `playbackOptions -q -min`;
	float $currentE = `playbackOptions -q -max`;	
	float $midFrame = int(($currentE - $currentS) * .5)+$currentS;
	// 0:Server 1:Job 2:ShotFolder 3:Seq 4:Shot 5:dept 6:subDept 7:take 8:version 9:ext
	string $shotInfo[] = abxShotsGetFromPath($filePath);
	// 0:abxShotsVersion 1:shotName 2:resolution 3:frameRate 4:startFrame 5:endFrame 6:camVersion 7:camDate 8:anmStatus 9:fxStatus 10:lgtStatus 11:cmpStatus 12:notes 13:lens 14:thumbframe 15:assets 16:flags 
    string $shotDetails[] = abxShotsGetShotDetails(($shotInfo[3]+"/"+$shotInfo[4]+"_"+$shotInfo[10]), $shotInfo[2]);
    //print ("SHOTDETAILS\n");
    //print ($shotDetails);
    float $thumbFrame = int($shotInfo[14]);

    if (size($shotDetails)>14){
    	if ($thumbFrame > 0 && $thumbFrame < 10000){
    		currentTime -e $thumbFrame;
    	}
    	else {
    		currentTime -e $midFrame;
    	}
    	abxShotsCaptureThumbnail "";
	}

}


global proc string studioPlayblastRenderPath(){

	string $renderPath;
	setAttr -type "string" defaultRenderGlobals.imageFilePrefix "<Scene>/<RenderLayer>/<Scene>_<RenderLayer>_<RenderPass>_<Camera>";

	string $shotInfo[] = abxShotsGetFromPath(`file -q -sn`);
	if ($shotInfo[2] == "assets"){
		string $assetInfo[] = abxAssetsGetFromPath(`file -q -sn`);
		$renderPath = ($assetInfo[0]+"/"+$assetInfo[1]+"/"+$assetInfo[2]+"/"+$assetInfo[3]+"/"+$assetInfo[4]+"/"+$assetInfo[5]+"/render/");

	}
	else if ($shotInfo[2] == "shots" || $shotInfo[2] == "Shots"){
		$renderPath = ($shotInfo[0]+"/"+$shotInfo[1]+"/"+$shotInfo[2]+"/"+$shotInfo[3]+"/"+$shotInfo[4]+"_"+$shotInfo[10]+"/"+$shotInfo[5]+"/render/");
	}
	else{
		$renderPath = (`workspace -q -rd`+"maya/images");
	}

	return $renderPath;

}