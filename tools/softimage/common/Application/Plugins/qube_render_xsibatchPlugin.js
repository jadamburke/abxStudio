
// qube_render_xsibatchPlugin
// Initial code generated by XSI SDK Wizard
// Executed Mon Aug 4 14:13:27 UTC-1000 2008 by demo
// 
// Tip: To add a command to this plug-in, right-click in the 
// script editor and choose Tools > Add Command.
// 
// See also Plugin Manager for loading/reloading
// 
// Tip: To get help on a callback, highlight the callback name
// (for example, "Init", "Define", or "Execute") and press F1.

function XSILoadPlugin( in_reg )
{
	in_reg.Author = "PipelineFX";
	in_reg.Name = "qube_render_xsibatchPlugin";
	in_reg.Email = "support@pipelinefx.com";
	in_reg.URL = "www.pipelinefx.com";
	in_reg.Major = 5;
	in_reg.Minor = 5;

	in_reg.RegisterCommand("qube_render_xsibatch","qube_render_xsibatch");
	in_reg.RegisterMenu(siMenuTbRenderRenderID,"qube_render_xsibatch_Menu",false,false);
	//RegistrationInsertionPoint - do not remove this line

	return true;
}

function XSIUnloadPlugin( in_reg )
{
	var strPluginName;
	strPluginName = in_reg.Name;
	Application.LogMessage(strPluginName + " has been unloaded.",siVerbose);
	return true;
}

function qube_render_xsibatch_Init( in_ctxt )
{
	var oCmd;
	oCmd = in_ctxt.Source;
	oCmd.Description = "Launch Qube submit render dialog";
	oCmd.ReturnValue = true;

	return true;
}

function qube_render_xsibatch_Execute(  )
{

    Application.LogMessage("qube_render_xsibatch_Execute called",siVerbose);
    // 
    // NOTE: Put your command implementation here.
    //
    //var qubeguiPath = "\"qube.exe\"";
    //var qubeguiPath = "\"C:/Program Files/pfx/qube/bin/qube.exe\"";
    var qubeguiPath = "\"C:/Program Files (x86)/pfx/qube/bin/qube.exe\"";

    var env = "";

    // == Get Scene properties ==
    var currentscene = ActiveProject.ActiveScene;    
    var scenePath    = currentscene.Parameters("Filename").Value.replace(/\\/g, "/");  // use / instead of \ for path
    var jobName      = "XSI "+currentscene.Parameters("Name").Value;

    // == Get Pass information ==
    //   Construct a passesStr with format <pass>:<range>,... ie. Beauty:1-100x5,Depth:5-100x1
    //   Note: "FrameSet" currently not supported  ("Pass.FrameRangeSource" == 1)
    //         The "FrameSet" is ignored in the xsibatch rendering by default, so Qube following that pattern
    var passes       = currentscene.passes;
    var passesStr = "";
    for(i = 0; i < passes.Count; i++) {
        passesStr += passes(i).Name;
        // Embed pass frame ranges if available (Available with XSI 7.0, not available with XSI 5.11)
        if (currentscene.ActivePass.Parameters("FrameStart") != null) { 
            passesStr += ":";
            passesStr += passes(i).Parameters("FrameStart").Value+"-"+
                         passes(i).Parameters("FrameEnd").Value;
            if (passes(i).Parameters("FrameStep").Value != 1) {
                passesStr += "x"+passes(i).Parameters("FrameStep").Value;
            }
        }
        passesStr += ","; // NOTE: Consider switching to ; from , so can support FrameSet (that can use ,)   
    }

    // == Determine framerange ==
    // Perform a check for what parameters are available for the version of XSI used
    var frameBegin = 0;
    var frameEnd   = 0;
    var frameStep  = 1;
    if (currentscene.ActivePass.Parameters("FrameStart") != null) { 
        // From ActivePass (confirmed available with XSI 7.0)
        frameBegin = currentscene.ActivePass.Parameters("FrameStart").Value;
        frameEnd   = currentscene.ActivePass.Parameters("FrameEnd").Value;
        frameStep  = currentscene.ActivePass.Parameters("FrameStep").Value;
    } else {
        // From Timeline (backwards compatible with XSI 5.11)
        var remote_control = Dictionary.GetObject( "PlayControl" );
        frameBegin = remote_control.Parameters( "In"   ).Value;
        frameEnd   = remote_control.Parameters( "Out"  ).Value;
        frameStep  = remote_control.Parameters( "Step" ).Value;
    }
    // Other range options:
    // From RenderOptions (available with XSI 7.0)
    // frameBegin = GetValue("Passes.RenderOptions.FrameStart");
    // frameEnd   = GetValue("Passes.RenderOptions.FrameEnd");
    // frameStep  = GetValue("Passes.RenderOptions.FrameStep");

    // Construct framerange from begin, end, step    
    var framerange  = frameBegin+"-"+frameEnd;
    if (frameStep != 1) {
        framerange += "x"+frameStep;
    }

    // == Construct and execute command ==
    var cmd = qubeguiPath+" --submitDict \"{"+
                        "'prototype':'cmdrange', "+
                        "'name':'" + jobName + "',"+
                        "'env':{" + qube_render_xsibatch_getEnv() + "},"+
                        "'package':{"+
                            "'simpleCmdType':'XSI BatchRender',"+
                            "'xsiExe':'C:/Program Files/Autodesk/Softimage 2015/Application/bin/xsibatch.bat',"+
                            "'-scene':'"+scenePath+"',"+
                            "'range':'"+framerange+"',"+
                            "'pass_list':'"+passesStr+"',"+
                        "}}\"";
    Application.LogMessage("CMD: "+cmd);
    XSIUtils.LaunchProcess( cmd );
    
    return true;
}

function qube_render_xsibatch_Menu_Init( in_ctxt )
{
	var oMenu;
	oMenu = in_ctxt.Source;
	oMenu.AddCommandItem("Render (Qube xsibatch)","qube_render_xsibatch");
	return true;
}


function qube_render_xsibatch_getEnv()
{
    var envDictString = "";
    var sep = "";
    var oWshShell = new ActiveXObject ("WScript.Shell");
    var oEnv = oWshShell.Environment("Process");

    oEnum = new Enumerator( oEnv) ;
    for (;!oEnum.atEnd();oEnum.moveNext() )
    {   
        var encStr = oEnum.item().replace(/\\/g,"\\\\");
        var oSelItem = encStr.split("=") ;
        if (oSelItem[0] != "")
        {
            if (oSelItem[0].indexOf("ARNOLD") != -1 || oSelItem[0].indexOf("PLUGINS") != -1){
                //var key = oSelItem[0].replace(/\([A-z1-9]+\)/g,"_");
                var key = oSelItem[0];
                var val = oSelItem[1];
                envDictString += (sep+" '"+key+"':'"+val+"'") 
                if (sep == "")
                    sep = ",";
            }
        }
        
    } 
    LogMessage(envDictString);
    return envDictString;
}